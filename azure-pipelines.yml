# Azure DevOps Pipeline for React Native iOS and Android

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .github/**

pr:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .github/**

variables:
  - group: react-native-app-variables

stages:
#  - stage: iOS
#    displayName: 'iOS Build and Deploy'
#    dependsOn: []
#    pool:
#      vmImage: 'macos-latest'
#    jobs:
#      - job: Build
#        displayName: 'Build and Deploy iOS'
#        steps:
#          - checkout: self
#            clean: true
#
#          - task: NodeTool@0
#            inputs:
#              versionSpec: '18.x'
#            displayName: 'Install Node.js'
#
#          - script: |
#              npm ci
#            displayName: 'Install npm dependencies'
#
#          - script: |
#              cd ios && pod install
#            displayName: 'Install CocoaPods dependencies'
#
#          - task: InstallAppleCertificate@2
#            inputs:
#              certSecureFile: 'ios_distribution.p12'
#              certPwd: '$(IOS_P12_PASSWORD)'
#              keychain: 'temp'
#              keychainPassword: '$(KEYCHAIN_PASSWORD)'
#            displayName: 'Install Apple Certificate'
#
#          - task: InstallAppleProvisioningProfile@1
#            inputs:
#              provisioningProfileLocation: 'secureFiles'
#              provProfileSecureFile: 'distribution.mobileprovision'
#            displayName: 'Install Apple Provisioning Profile'
#
#          - task: DownloadSecureFile@1
#            name: googleServiceInfoPlist
#            inputs:
#              secureFile: 'GoogleService-Info.plist'
#            displayName: 'Download GoogleService-Info.plist'
#
#          - script: |
#              cp $(googleServiceInfoPlist.secureFilePath) ios/GoogleService-Info.plist
#            displayName: 'Copy GoogleService-Info.plist'
#
#          - script: |
#              cd ios
#              bundle install
#              bundle exec fastlane beta
#            env:
#              BUNDLE_IDENTIFIER: '$(IOS_BUNDLE_IDENTIFIER)'
#              TEAM_ID: '$(TEAM_ID)'
#              APPLE_ID: '$(APPLE_ID)'
#              APP_STORE_CONNECT_API_KEY_ID: '$(APP_STORE_CONNECT_API_KEY_ID)'
#              APP_STORE_CONNECT_API_KEY_ISSUER_ID: '$(APP_STORE_CONNECT_API_KEY_ISSUER_ID)'
#              APP_STORE_CONNECT_API_KEY_CONTENT: '$(APP_STORE_CONNECT_API_KEY_CONTENT)'
#            displayName: 'Build and deploy to TestFlight'

  - stage: Android
    displayName: 'Android Build and Deploy'
    dependsOn: []
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: Build
        displayName: 'Build and Deploy Android'
        steps:
          - checkout: self
            clean: true

          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          - script: |
              rm -rf node_modules
              npm ci
            displayName: 'Clean and install npm dependencies'

          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '17'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'Install Java'

          - task: DownloadSecureFile@1
            name: googleServicesJson
            inputs:
              secureFile: 'google-services.json'
            displayName: 'Download google-services.json'

          - script: |
              cp $(googleServicesJson.secureFilePath) android/app/google-services.json
            displayName: 'Copy google-services.json'

          - task: DownloadSecureFile@1
            name: androidKeystore
            inputs:
              secureFile: 'my_app_release.keystore'
            displayName: 'Download Android keystore'

          - script: |
              cp $(androidKeystore.secureFilePath) android/release.keystore
              echo "storeFile=../release.keystore" > android/keystore.properties
              echo "storePassword=$(ANDROID_KEYSTORE_PASSWORD)" >> android/keystore.properties
              echo "keyAlias=$(ANDROID_KEY_ALIAS)" >> android/keystore.properties
              echo "keyPassword=$(ANDROID_KEY_PASSWORD)" >> android/keystore.properties
            displayName: 'Setup Android signing'

          - script: |
              npm install -g firebase-tools
            displayName: 'Install Firebase CLI'

          - script: |
              # Get version from package.json
              VERSION=$(node -p "require('./package.json').version")
              echo "Using version from package.json: $VERSION"

              # Get current versionCode from build.gradle
              CURRENT_VERSION_CODE=$(grep -o "versionCode [0-9]*" android/app/build.gradle | awk '{print $2}')
              NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
              echo "Incrementing versionCode from $CURRENT_VERSION_CODE to $NEW_VERSION_CODE"

              # Update versionName and versionCode in build.gradle
              sed -i "s/versionCode $CURRENT_VERSION_CODE/versionCode $NEW_VERSION_CODE/" android/app/build.gradle
              sed -i "s/versionName \"[^\"]*\"/versionName \"$VERSION\"/" android/app/build.gradle

              echo "Updated app/build.gradle with new version information"
            displayName: 'Update app version'

          - script: |
              cd android
              ./gradlew clean
            displayName: 'Clean Android build'

          - script: |
              cd android
              bundle install
              bundle exec fastlane beta
            env:
              ANDROID_PACKAGE_NAME: '$(ANDROID_PACKAGE_NAME)'
              ANDROID_KEYSTORE_PATH: '../release.keystore'
              ANDROID_KEYSTORE_PASSWORD: '$(ANDROID_KEYSTORE_PASSWORD)'
              ANDROID_KEY_ALIAS: '$(ANDROID_KEY_ALIAS)'
              ANDROID_KEY_PASSWORD: '$(ANDROID_KEY_PASSWORD)'
              FIREBASE_APP_ID_ANDROID: '$(FIREBASE_APP_ID_ANDROID)'
              FIREBASE_CLI_TOKEN: '$(FIREBASE_CLI_TOKEN)'
              FIREBASE_TESTERS: '$(FIREBASE_TESTERS)'
            displayName: 'Build and deploy to App Tester'

          - script: |
              if [ ! -f android/app/build/outputs/apk/release/app-release.apk ]; then
                echo "APK file not found!"
                exit 1
              fi
            displayName: 'Verify APK exists'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'android/app/build/outputs/apk/release/app-release.apk'
              artifact: 'app-release'
              publishLocation: 'pipeline'
            displayName: 'Upload APK as artifact'
